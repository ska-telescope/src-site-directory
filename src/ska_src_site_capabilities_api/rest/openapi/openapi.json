{"openapi":"3.0.2","info":{"title":"Site Capabilities API Overview","version":"1.0"},"paths":{"/compute":{"get":{"tags":["Compute"],"summary":"List all compute","description":"List all compute.","operationId":"list_compute_compute_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ComputeListResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/compute"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/compute\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/compute\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/compute\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/compute/{compute_id}":{"get":{"tags":["Compute"],"summary":"Get compute from id","description":"Get description of a compute element from a unique identifier.","operationId":"get_compute_from_id_compute__compute_id__get","parameters":[{"description":"Unique compute identifier","required":true,"schema":{"title":"Compute Id","type":"string","description":"Unique compute identifier"},"name":"compute_id","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Compute"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/compute/{compute_id}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/compute/{compute_id}\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/compute/{compute_id}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/compute/{compute_id}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/schemas":{"get":{"tags":["Schemas"],"summary":"List schemas","description":"Get a list of schema names used to define entities.","operationId":"list_schemas_schemas_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 List Schemas Schemas Get","type":"array","items":{"type":"string"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/schemas"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/schemas\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/schemas\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/schemas\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/schemas/{schema}":{"get":{"tags":["Schemas"],"summary":"Get schema","description":"Get a schema by name.","operationId":"get_schema_schemas__schema__get","parameters":[{"description":"Schema name","required":true,"schema":{"title":"Schema","type":"string","description":"Schema name"},"name":"schema","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Schema"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/schemas/{schema}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/schemas/{schema}\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/schemas/{schema}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/schemas/{schema}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/schemas/render/{schema}":{"get":{"tags":["Schemas"],"summary":"Render a schema","description":"Render a schema by name.","operationId":"render_schema_schemas_render__schema__get","parameters":[{"description":"Schema name","required":true,"schema":{"title":"Schema","type":"string","description":"Schema name"},"name":"schema","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/schemas/render/{schema}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/schemas/render/{schema}\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/schemas/render/{schema}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/schemas/render/{schema}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/services":{"get":{"tags":["Services"],"summary":"List all services","description":"List all services.","operationId":"list_services_services_get","parameters":[{"description":"Include services associated with compute?","required":false,"schema":{"title":"Include Associated With Compute","type":"boolean","description":"Include services associated with compute?","default":true},"name":"include_associated_with_compute","in":"query"},{"description":"Include disabled services?","required":false,"schema":{"title":"Include Disabled","type":"boolean","description":"Include disabled services?","default":false},"name":"include_disabled","in":"query"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServicesResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/services"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/services\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/services\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/services\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/services/types":{"get":{"tags":["Services"],"summary":"List service types","description":"List service types.","operationId":"list_service_types_services_types_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServicesTypesResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}]}},"/services/{service_id}":{"get":{"tags":["Services"],"summary":"Get service from id","description":"Get a service description from a unique identifier.","operationId":"get_service_from_id_services__service_id__get","parameters":[{"description":"Unique service identifier","required":true,"schema":{"title":"Service Id","type":"string","description":"Unique service identifier"},"name":"service_id","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 Get Service From Id Services  Service Id  Get","anyOf":[{"$ref":"#/components/schemas/CoreService"},{"$ref":"#/components/schemas/ComputeService"}]}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/services/{service_id}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/services/{service_id}\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/services/{service_id}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/services/{service_id}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/sites":{"get":{"tags":["Sites"],"summary":"List sites","description":"List all sites.","operationId":"list_sites_sites_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 List Sites Sites Get","type":"array","items":{"type":"string"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/sites"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Sites"],"summary":"Delete all sites","description":"Delete all sites.","operationId":"delete_sites_sites_delete","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericOperationResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url {{ api_server_url }}/sites"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/sites/dump":{"get":{"tags":["Sites"],"summary":"Dump all versions of sites","description":"Dump sites.","operationId":"dump_sites_sites_dump_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 Dump Sites Sites Dump Get","type":"array","items":{"$ref":"#/components/schemas/Site"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/sites/dump"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites/dump\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites/dump\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites/dump\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/sites/latest":{"get":{"tags":["Sites"],"summary":"Get latest versions of all sites","description":"Get the latest version of all sites.","operationId":"get_sites_latest_sites_latest_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 Get Sites Latest Sites Latest Get","type":"array","items":{"$ref":"#/components/schemas/Site"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/sites/latest"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites/latest\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites/latest\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites/latest\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/sites/{site}":{"get":{"tags":["Sites"],"summary":"Get all versions of site","description":"Get all versions of a site.","operationId":"get_site_versions_sites__site__get","parameters":[{"description":"Site name","required":true,"schema":{"title":"Site","type":"string","description":"Site name"},"name":"site","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 Get Site Versions Sites  Site  Get","type":"array","items":{"$ref":"#/components/schemas/Site"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/sites/{site}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites/{site}\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites/{site}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites/{site}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Sites"],"summary":"Delete all versions of site","description":"Delete all versions of a site.","operationId":"delete_site_sites__site__delete","parameters":[{"description":"Site name","required":true,"schema":{"title":"Site","type":"string","description":"Site name"},"name":"site","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericOperationResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url {{ api_server_url }}/sites/{site}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites/{site}\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites/{site}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites/{site}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/sites/{site}/{version}":{"get":{"tags":["Sites"],"summary":"Get version of site","description":"Get a version of a site.","operationId":"get_site_version_sites__site___version__get","parameters":[{"description":"Site name","required":true,"schema":{"title":"Site","type":"string","description":"Site name"},"name":"site","in":"path"},{"description":"Site version","required":true,"schema":{"title":"Version","type":"string","description":"Site version"},"example":"latest","name":"version","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Site"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/sites/{site}/latest"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites/{site}/latest\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites/{site}/latest\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites/{site}/latest\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Sites"],"summary":"Delete version of site","description":"Delete a version of a site.","operationId":"delete_site_version_sites__site___version__delete","parameters":[{"description":"Site name.","required":true,"schema":{"title":"Site","type":"string","description":"Site name."},"name":"site","in":"path"},{"description":"Site version","required":true,"schema":{"title":"Version","type":"string","description":"Site version"},"example":"latest","name":"version","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericOperationResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url {{ api_server_url }}/sites/{site}/latest"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/sites/{site}/latest\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/sites/{site}/latest\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/sites/{site}/latest\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/storages":{"get":{"tags":["Storages"],"summary":"List all storages","description":"List all storages.","operationId":"list_storages_storages_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StoragesListResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/storages"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/storages\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/storages\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/storages\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/storages/grafana":{"get":{"tags":["Storages"],"summary":"List all storages (Grafana format)","description":"List all storages in a format digestible by Grafana world map panels.","operationId":"list_storages_for_grafana_storages_grafana_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 List Storages For Grafana Storages Grafana Get","type":"array","items":{"$ref":"#/components/schemas/StorageGrafana"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/storages/grafana"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/storages/grafana\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/storages/grafana\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/storages/grafana\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/storages/topojson":{"get":{"tags":["Storages"],"summary":"List all storages (topojson format)","description":"List all storages in topojson format.","operationId":"list_storages_in_topojson_format_storages_topojson_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 List Storages In Topojson Format Storages Topojson Get","type":"array","items":{"$ref":"#/components/schemas/StorageTopojson"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/storages/topojson"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/storages/topojson\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/storages/topojson\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/storages/topojson\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/storages/{storage_id}":{"get":{"tags":["Storages"],"summary":"Get storage from id","description":"Get a storage description from a unique identifier.","operationId":"get_storage_from_id_storages__storage_id__get","parameters":[{"description":"Unique storage identifier","required":true,"schema":{"title":"Storage Id","type":"string","description":"Unique storage identifier"},"name":"storage_id","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Storage"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}],"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/storages/{storage_id}"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/storages/{storage_id}\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/storages/{storage_id}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/storages/{storage_id}\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/storage-areas":{"get":{"tags":["Storage Areas"],"summary":"List all storage areas","description":"List all storage areas.","operationId":"list_storages_storage_areas_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StorageAreasListResponse"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"security":[{"HTTPBearer":[]}]}},"/storage-areas/grafana":{"get":{"tags":["Storage Areas"],"summary":"List all storage areas (Grafana format)","description":"List all storage areas in a format digestible by Grafana world map panels.","operationId":"list_storage_areas_for_grafana_storage_areas_grafana_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 List Storage Areas For Grafana Storage Areas Grafana Get","type":"array","items":{"$ref":"#/components/schemas/StorageAreaGrafana"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}}}},"/storage-areas/topojson":{"get":{"tags":["Storage Areas"],"summary":"List all storage areas (topojson format)","description":"List all storage areas in topojson format.","operationId":"list_storage_areas_in_topojson_format_storage_areas_topojson_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"title":"Response 200 List Storage Areas In Topojson Format Storage Areas Topojson Get","type":"array","items":{"$ref":"#/components/schemas/StorageAreaTopojson"}}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}}}},"/storage-areas/{storage_area_id}":{"get":{"tags":["Storage Areas"],"summary":"Get storage area from id","description":"Get a storage area description from a unique identifier.","operationId":"get_storage_area_from_id_storage_areas__storage_area_id__get","parameters":[{"description":"Unique storage area identifier","required":true,"schema":{"title":"Storage Area Id","type":"string","description":"Unique storage area identifier"},"name":"storage_area_id","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StorageArea"}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenericErrorResponse"}}}}},"security":[{"HTTPBearer":[]}]}},"/www/sites/add":{"get":{"tags":["Sites"],"summary":"Add site form","description":"Web form to add a new site with JSON schema validation.\n\nA valid token must be included in the <b>token</b> query parameter.","operationId":"add_site_form_www_sites_add_get","parameters":[{"required":false,"schema":{"title":"Token","type":"string"},"name":"token","in":"query"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url '{{ api_server_url }}/www/sites/add?token=SOME_STRING_VALUE'"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/www/sites/add\"\n\nquerystring = {\"token\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/www/sites/add?token=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/www/sites/add?token=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/www/sites/add/{site}":{"get":{"tags":["Sites"],"summary":"Update existing site form","description":"Web form to update an existing site with JSON schema validation.\n\nA valid token must be included in the <b>token</b> query parameter.","operationId":"add_site_form_existing_www_sites_add__site__get","parameters":[{"required":true,"schema":{"title":"Site","type":"string"},"name":"site","in":"path"},{"required":false,"schema":{"title":"Token","type":"string"},"name":"token","in":"query"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url '{{ api_server_url }}/www/sites/add/{site}?token=SOME_STRING_VALUE'"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/www/sites/add/{site}\"\n\nquerystring = {\"token\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/www/sites/add/{site}?token=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/www/sites/add/{site}?token=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/ping":{"get":{"tags":["Status"],"summary":"Check API status","description":"Service aliveness.","operationId":"ping_ping_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PingResponse"}}}}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/ping"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/ping\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/ping\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/ping\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/health":{"get":{"tags":["Status"],"summary":"Check API health","description":"Service health.\n\nThis endpoint will return a 500 if any of the dependent services are down.","operationId":"health_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HealthResponse"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HealthResponse"}}}}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url {{ api_server_url }}/health"},{"lang":"python","source":"import requests\n\nurl = \"{{ api_server_url }}/health\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"{{ api_server_url }}/health\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"js","source":"const http = require(\"http\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8080\",\n  \"path\": \"/v1/health\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}}},"components":{"schemas":{"Compute":{"title":"Compute","required":["url","latitude","longitude","hardware_capabilities","hardware_type","description","middleware_version","associated_services"],"type":"object","properties":{"id":{"title":"Id","type":"string","format":"uuid"},"url":{"title":"Url","type":"string","examples":["service.srcdev.skao.int"]},"latitude":{"title":"Latitude","type":"number","examples":[51.4964]},"longitude":{"title":"Longitude","type":"number","examples":[-0.1224]},"hardware_capabilities":{"title":"Hardware Capabilities","type":"string","examples":["GPU"]},"hardware_type":{"title":"Hardware Type","type":"string","examples":["bare_metal"]},"description":{"title":"Description","type":"string","examples":["some description"]},"middleware_version":{"title":"Middleware Version","type":"string","examples":["1.0.0"]},"associated_services":{"title":"Associated Services","type":"array","items":{"$ref":"#/components/schemas/ComputeService"}}}},"ComputeListResponse":{"title":"ComputeListResponse","required":["site_name","compute"],"type":"object","properties":{"site_name":{"title":"Site Name","type":"string","examples":["SKAOSRC","CNSRC","KRSRC","SPSRC","JPSRC"]},"compute":{"title":"Compute","type":"array","items":{"$ref":"#/components/schemas/Compute"}}}},"ComputeService":{"title":"ComputeService","required":["version","prefix","host","port","path","identifier","other_attributes","type"],"type":"object","properties":{"id":{"title":"Id","type":"string","format":"uuid"},"version":{"title":"Version","type":"string","examples":["1.0.0"]},"prefix":{"title":"Prefix","type":"string","examples":["https"]},"host":{"title":"Host","type":"string","examples":["rucio.srcdev.skao.int"]},"port":{"title":"Port","minimum":0.0,"type":"integer","examples":[443]},"path":{"title":"Path","type":"string","examples":["/path/to/service"]},"identifier":{"title":"Identifier","type":"string","examples":["SKAOSRC"]},"other_attributes":{"title":"Other Attributes","type":"object","examples":[{"some_key":"some_value"}]},"type":{"title":"Type","enum":["JupyterHub","BinderHub","Dask","ESAP","Data Ingest Service","SODA (sync)","SODA (async)"],"type":"string","examples":["Dask"]},"associated_compute_id":{"title":"Associated Compute Id","type":"string","format":"uuid"},"associated_storage_area_id":{"title":"Associated Storage Area Id","type":"string","format":"uuid"}}},"CoreService":{"title":"CoreService","required":["version","prefix","host","port","path","identifier","other_attributes","type"],"type":"object","properties":{"id":{"title":"Id","type":"string","format":"uuid"},"version":{"title":"Version","type":"string","examples":["1.0.0"]},"prefix":{"title":"Prefix","type":"string","examples":["https"]},"host":{"title":"Host","type":"string","examples":["rucio.srcdev.skao.int"]},"port":{"title":"Port","minimum":0.0,"type":"integer","examples":[443]},"path":{"title":"Path","type":"string","examples":["/path/to/service"]},"identifier":{"title":"Identifier","type":"string","examples":["SKAOSRC"]},"other_attributes":{"title":"Other Attributes","type":"object","examples":[{"some_key":"some_value"}]},"type":{"title":"Type","enum":["Rucio Server","Storage Inventory (Global)"],"type":"string","examples":["Rucio Server"]}}},"DependentServiceStatus":{"title":"DependentServiceStatus","required":["status"],"type":"object","properties":{"status":{"title":"Status","enum":["UP","DOWN"],"type":"string","examples":["UP"]}}},"DependentServices":{"title":"DependentServices","required":["permissions-api"],"type":"object","properties":{"permissions-api":{"$ref":"#/components/schemas/DependentServiceStatus"}}},"GenericErrorResponse":{"title":"GenericErrorResponse","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"string"}}},"GenericOperationResponse":{"title":"GenericOperationResponse","required":["successful"],"type":"object","properties":{"successful":{"title":"Successful","type":"boolean","examples":[true]}}},"HTTPValidationError":{"title":"HTTPValidationError","type":"object","properties":{"detail":{"title":"Detail","type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}},"HealthResponse":{"title":"HealthResponse","required":["uptime","number_of_managed_requests","dependent_services"],"type":"object","properties":{"uptime":{"title":"Uptime","minimum":0.0,"type":"integer","examples":[1000]},"number_of_managed_requests":{"title":"Number Of Managed Requests","minimum":0.0,"type":"integer","examples":[50]},"dependent_services":{"$ref":"#/components/schemas/DependentServices"}}},"PingResponse":{"title":"PingResponse","required":["status","version"],"type":"object","properties":{"status":{"title":"Status","enum":["UP","DOWN"],"type":"string"},"version":{"title":"Version","type":"string"}}},"Schema":{"title":"Schema","required":["version","type","description","properties"],"type":"object","properties":{"version":{"title":"Version","minimum":0.0,"type":"integer","examples":[1]},"type":{"title":"Type","type":"string","examples":["object"]},"description":{"title":"Description","type":"string","examples":["Site definition schema"]},"properties":{"title":"Properties","type":"object","additionalProperties":{"anyOf":[{"type":"string"},{"type":"object"}]}}}},"ServicesResponse":{"title":"ServicesResponse","required":["site_name","services"],"type":"object","properties":{"site_name":{"title":"Site Name","type":"string","examples":["SKAOSRC","CNSRC","KRSRC","SPSRC","JPSRC"]},"services":{"title":"Services","type":"array","items":{"anyOf":[{"$ref":"#/components/schemas/CoreService"},{"$ref":"#/components/schemas/ComputeService"}]}}}},"ServicesTypesResponse":{"title":"ServicesTypesResponse","required":["core","compute"],"type":"object","properties":{"core":{"title":"Core","type":"array","items":{"enum":["Rucio Server","Storage Inventory (Global)"],"type":"string"}},"compute":{"title":"Compute","type":"array","items":{"enum":["JupyterHub","BinderHub","Dask","ESAP","Data Ingest Service","SODA (sync)","SODA (async)"],"type":"string"}}}},"Site":{"title":"Site","required":["name","comments","description","country","primary_contact_email","secondary_contact_email","core_services","compute","storages","schema","created_at","created_by_username","version","other_attributes"],"type":"object","properties":{"name":{"title":"Name","type":"string","examples":["SKAOSRC"]},"comments":{"title":"Comments","type":"string","examples":["Some version comments"]},"description":{"title":"Description","type":"string","examples":["Some description"]},"country":{"title":"Country","type":"string","examples":["GB"]},"primary_contact_email":{"title":"Primary Contact Email","type":"string","Examples":["someone1@email.com"]},"secondary_contact_email":{"title":"Secondary Contact Email","type":"string","Examples":["someone2@email.com"]},"core_services":{"title":"Core Services","type":"array","items":{"$ref":"#/components/schemas/CoreService"}},"compute":{"title":"Compute","type":"array","items":{"$ref":"#/components/schemas/Compute"}},"storages":{"title":"Storages","type":"array","items":{"$ref":"#/components/schemas/Storage"}},"schema":{"$ref":"#/components/schemas/Schema"},"created_at":{"title":"Created At","type":"string","examples":["2023-09-14T13:43:09.239513"]},"created_by_username":{"title":"Created By Username","type":"string","examples":["username"]},"version":{"title":"Version","minimum":0.0,"type":"integer","examples":[1]},"other_attributes":{"title":"Other Attributes","type":"object","examples":[{"some_key":"some_value"}]}}},"Storage":{"title":"Storage","required":["host","base_path","latitude","longitude","srm","device_type","size_in_terabytes","identifier","supported_protocols","areas"],"type":"object","properties":{"id":{"title":"Id","type":"string","format":"uuid"},"host":{"title":"Host","type":"string","examples":["storm.srcdev.skao.int"]},"base_path":{"title":"Base Path","type":"string","examples":["/path/to/storage"]},"latitude":{"title":"Latitude","type":"number","examples":[51.4964]},"longitude":{"title":"Longitude","type":"number","examples":[-0.1224]},"srm":{"title":"Srm","type":"string","examples":["srm"]},"device_type":{"title":"Device Type","type":"string","examples":["hdd"]},"size_in_terabytes":{"title":"Size In Terabytes","type":"number","examples":[10]},"identifier":{"title":"Identifier","type":"string","examples":["SKAOSRC"]},"supported_protocols":{"title":"Supported Protocols","type":"array","items":{"$ref":"#/components/schemas/StorageProtocol"}},"areas":{"title":"Areas","type":"array","items":{"$ref":"#/components/schemas/StorageArea"}}}},"StorageArea":{"title":"StorageArea","required":["type","rel_path","identifier","other_attributes"],"type":"object","properties":{"id":{"title":"Id","type":"string","format":"uuid"},"type":{"title":"Type","enum":["Rucio Storage Element (RSE)","Data Ingest Area","Storage Inventory (Local)"],"type":"string","examples":["Rucio Storage Element (RSE)"]},"rel_path":{"title":"Rel Path","type":"string","examples":["/rel/path/to/storage/area"]},"identifier":{"title":"Identifier","type":"string","examples":["STFC_STORM"]},"other_attributes":{"title":"Other Attributes","type":"object","examples":[{"some_key":"some_value"}]}}},"StorageAreaGrafana":{"title":"StorageAreaGrafana","required":["key","latitude","longitude","name"],"type":"object","properties":{"key":{"title":"Key","type":"string","examples":["JPSRC"]},"latitude":{"title":"Latitude","type":"number","examples":[35.6754]},"longitude":{"title":"Longitude","type":"number","examples":[139.5369]},"name":{"title":"Name","type":"string","examples":["JPSRC"]}}},"StorageAreaTopojson":{"title":"StorageAreaTopojson","required":["type","objects"],"type":"object","properties":{"type":{"title":"Type","type":"string","examples":["Topology"]},"objects":{"$ref":"#/components/schemas/StorageAreaTopojsonObject"}}},"StorageAreaTopojsonObject":{"title":"StorageAreaTopojsonObject","required":["sites"],"type":"object","properties":{"sites":{"$ref":"#/components/schemas/StorageAreaTopojsonObjectSite"}}},"StorageAreaTopojsonObjectSite":{"title":"StorageAreaTopojsonObjectSite","required":["type","geometries"],"type":"object","properties":{"type":{"title":"Type","type":"string","examples":["GeometryCollection"]},"geometries":{"title":"Geometries","type":"array","items":{"$ref":"#/components/schemas/StorageAreaTopojsonObjectSiteGeometry"}}}},"StorageAreaTopojsonObjectSiteGeometry":{"title":"StorageAreaTopojsonObjectSiteGeometry","required":["type","coordinates"],"type":"object","properties":{"type":{"title":"Type","type":"string","examples":["Point"]},"coordinates":{"title":"Coordinates","type":"array","items":{"type":"number"}}}},"StorageAreasListResponse":{"title":"StorageAreasListResponse","required":["site_name","storage_areas"],"type":"object","properties":{"site_name":{"title":"Site Name","type":"string","examples":["SKAOSRC","CNSRC","KRSRC","SPSRC","JPSRC"]},"storage_areas":{"title":"Storage Areas","type":"array","items":{"$ref":"#/components/schemas/StorageArea"}}}},"StorageGrafana":{"title":"StorageGrafana","required":["key","latitude","longitude","name"],"type":"object","properties":{"key":{"title":"Key","type":"string","examples":["JPSRC_STORM"]},"latitude":{"title":"Latitude","type":"number","examples":[35.6754]},"longitude":{"title":"Longitude","type":"number","examples":[139.5369]},"name":{"title":"Name","type":"string","examples":["JPSRC_STORM"]}}},"StorageProtocol":{"title":"StorageProtocol","required":["prefix","port"],"type":"object","properties":{"prefix":{"title":"Prefix","type":"string","examples":["https"]},"port":{"title":"Port","minimum":0.0,"type":"integer","examples":[443]}}},"StorageTopojson":{"title":"StorageTopojson","required":["type","objects"],"type":"object","properties":{"type":{"title":"Type","type":"string","examples":["Topology"]},"objects":{"$ref":"#/components/schemas/StorageTopojsonObject"}}},"StorageTopojsonObject":{"title":"StorageTopojsonObject","required":["sites"],"type":"object","properties":{"sites":{"$ref":"#/components/schemas/StorageTopojsonObjectSite"}}},"StorageTopojsonObjectSite":{"title":"StorageTopojsonObjectSite","required":["type","geometries"],"type":"object","properties":{"type":{"title":"Type","type":"string","examples":["GeometryCollection"]},"geometries":{"title":"Geometries","type":"array","items":{"$ref":"#/components/schemas/StorageTopojsonObjectSiteGeometry"}}}},"StorageTopojsonObjectSiteGeometry":{"title":"StorageTopojsonObjectSiteGeometry","required":["type","coordinates"],"type":"object","properties":{"type":{"title":"Type","type":"string","examples":["Point"]},"coordinates":{"title":"Coordinates","type":"array","items":{"type":"number"}}}},"StoragesListResponse":{"title":"StoragesListResponse","required":["site_name","storages"],"type":"object","properties":{"site_name":{"title":"Site Name","type":"string","examples":["SKAOSRC","CNSRC","KRSRC","SPSRC","JPSRC"]},"storages":{"title":"Storages","type":"array","items":{"$ref":"#/components/schemas/Storage"}}}},"ValidationError":{"title":"ValidationError","required":["loc","msg","type"],"type":"object","properties":{"loc":{"title":"Location","type":"array","items":{"anyOf":[{"type":"string"},{"type":"integer"}]}},"msg":{"title":"Message","type":"string"},"type":{"title":"Error Type","type":"string"}}}},"securitySchemes":{"HTTPBearer":{"type":"http","scheme":"bearer"}}},"servers":[{"url":"/v1"}],"tags":[{"name":"Sites","description":"Operations on sites.","x-tag-expanded":false},{"name":"Compute","description":"Operations on site compute.","x-tag-expanded":false},{"name":"Storages","description":"Operations on site storages.","x-tag-expanded":false},{"name":"Storage Areas","description":"Operations on site storage areas.","x-tag-expanded":false},{"name":"Services","description":"Operations on site services.","x-tag-expanded":false},{"name":"Schemas","description":"Schema operations.","x-tag-expanded":false},{"name":"Status","description":"Operations describing the status of the API.","x-tag-expanded":false}]}